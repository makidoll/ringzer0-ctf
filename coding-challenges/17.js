const request = require("request-promise-native");
const fs = require("fs");
const config = require("../config.js");
const Jimp = require("jimp");

var charMap = {
	"0": [
		"   ##   ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"   ##   ",
		"        ",
		"        ",
	],
	"1": [
		"   ##   ",
		"  ###   ",
		" ####   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		" ###### ",
		"        ",
		"        ",
	],
	"2": [
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"      ##",
		"     ## ",
		"    ##  ",
		"   ##   ",
		"  ##    ",
		" ##     ",
		"########",
		"        ",
		"        ",
	],
	"3": [
		" #####  ",
		"##   ## ",
		"      ##",
		"     ## ",
		"   ###  ",
		"     ## ",
		"      ##",
		"      ##",
		"##   ## ",
		" #####  ",
		"        ",
		"        ",
	],
	"4": [
		"     ## ",
		"    ### ",
		"   #### ",
		"  ## ## ",
		" ##  ## ",
		"##   ## ",
		"########",
		"     ## ",
		"     ## ",
		"     ## ",
		"        ",
		"        ",
	],
	"5": [
		"####### ",
		"##      ",
		"##      ",
		"## ###  ",
		"###  ## ",
		"      ##",
		"      ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"6": [
		"  ####  ",
		" ##  ## ",
		"##    # ",
		"##      ",
		"## ###  ",
		"###  ## ",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"7": [
		"########",
		"      ##",
		"      ##",
		"     ## ",
		"    ##  ",
		"   ##   ",
		"  ##    ",
		" ##     ",
		"##      ",
		"##      ",
		"        ",
		"        ",
	],
	"8": [
		"  ####  ",
		" ##  ## ",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"9": [
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		" ##  ###",
		"  ### ##",
		"      ##",
		" #    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"a": [
		"        ",
		"        ",
		"        ",
		"  ##### ",
		" ##   ##",
		"      ##",
		" #######",
		"##    ##",
		"##   ###",
		" #### ##",
		"        ",
		"        ",
	],
	"b": [
		"##      ",
		"##      ",
		"##      ",
		"## ###  ",
		"###  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"###  ## ",
		"## ###  ",
		"        ",
		"        ",
	],
	"c": [
		"        ",
		"        ",
		"        ",
		"  ##### ",
		" ##   ##",
		"##      ",
		"##      ",
		"##      ",
		" ##   ##",
		"  ##### ",
		"        ",
		"        ",
	],
	"d": [
		"      ##",
		"      ##",
		"      ##",
		"  ### ##",
		" ##  ###",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ###",
		"  ### ##",
		"        ",
		"        ",
	],
	"e": [
		"        ",
		"        ",
		"        ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"########",
		"##      ",
		" ##   ##",
		"  ##### ",
		"        ",
		"        ",
	],
	"f": [
		"   #### ",
		"  ##  ##",
		"  ##  ##",
		"  ##    ",
		"  ##    ",
		"######  ",
		"  ##    ",
		"  ##    ",
		"  ##    ",
		"  ##    ",
		"        ",
		"        ",
	],
	"g": [
		"        ",
		"        ",
		"        ",
		" ##### #",
		"##   ###",
		"##   ## ",
		"##   ## ",
		" #####  ",
		"##      ",
		" ###### ",
		"##    ##",
		" ###### ",
	],
	"h": [
		"##      ",
		"##      ",
		"##      ",
		"## ###  ",
		"###  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"i": [
		"   ##   ",
		"   ##   ",
		"        ",
		"  ###   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		" ###### ",
		"        ",
		"        ",
	],
	"j": [
		"     ## ",
		"     ## ",
		"        ",
		"    ### ",
		"     ## ",
		"     ## ",
		"     ## ",
		"     ## ",
		"     ## ",
		"##   ## ",
		"##   ## ",
		" #####  ",
	],
	"k": [
		" ##     ",
		" ##     ",
		" ##     ",
		" ##  ## ",
		" ## ##  ",
		" ####   ",
		" ####   ",
		" ## ##  ",
		" ##  ## ",
		" ##   ##",
		"        ",
		"        ",
	],
	"l": [
		"  ###   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"  ####  ",
		"        ",
		"        ",
	],
	"m": [
		"        ",
		"        ",
		"        ",
		"# ## ## ",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"        ",
		"        ",
	],
	"n": [
		"        ",
		"        ",
		"        ",
		"## ###  ",
		"###  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"o": [
		"        ",
		"        ",
		"        ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"p": [
		"        ",
		"        ",
		"        ",
		"## ###  ",
		"###  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"###  ## ",
		"## ###  ",
		"##      ",
		"##      ",
	],
	"q": [
		"        ",
		"        ",
		"        ",
		"  ### ##",
		" ##  ###",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ###",
		"  ### ##",
		"      ##",
		"      ##",
	],
	"r": [
		"        ",
		"        ",
		"        ",
		"## #### ",
		" ###  ##",
		" ##     ",
		" ##     ",
		" ##     ",
		" ##     ",
		" ##     ",
		"        ",
		"        ",
	],
	"s": [
		"        ",
		"        ",
		"        ",
		" ###### ",
		"##    ##",
		"##      ",
		" ###### ",
		"      ##",
		"##    ##",
		" ###### ",
		"        ",
		"        ",
	],
	"t": [
		"        ",
		"  ##    ",
		"  ##    ",
		"######  ",
		"  ##    ",
		"  ##    ",
		"  ##    ",
		"  ##    ",
		"  ##  ##",
		"   #### ",
		"        ",
		"        ",
	],
	"u": [
		"        ",
		"        ",
		"        ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ###",
		"  ### ##",
		"        ",
		"        ",
	],
	"v": [
		"        ",
		"        ",
		"        ",
		"##    ##",
		"##    ##",
		" ##  ## ",
		" ##  ## ",
		"  ####  ",
		"  ####  ",
		"   ##   ",
		"        ",
		"        ",
	],
	"w": [
		"        ",
		"        ",
		"        ",
		"##    ##",
		"##    ##",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"########",
		" ##  ## ",
		"        ",
		"        ",
	],
	"x": [
		"        ",
		"        ",
		"        ",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"   ##   ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"        ",
		"        ",
	],
	"y": [
		"        ",
		"        ",
		"        ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ###",
		"  ### ##",
		"#     ##",
		" ###### ",
	],
	"z": [
		"        ",
		"        ",
		"        ",
		" ###### ",
		"     ## ",
		"    ##  ",
		"   ##   ",
		"  ##    ",
		" ##     ",
		" ###### ",
		"        ",
		"        ",
	],
	"A": [
		"   ##   ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"########",
		"##    ##",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"B": [
		"######  ",
		"##   ## ",
		"##    ##",
		"##   ## ",
		"######  ",
		"##   ## ",
		"##    ##",
		"##    ##",
		"##   ## ",
		"######  ",
		"        ",
		"        ",
	],
	"C": [
		"  ##### ",
		" ##   ##",
		"##     #",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##     #",
		" ##   ##",
		"  ##### ",
		"        ",
		"        ",
	],
	"D": [
		"######  ",
		"##   ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##   ## ",
		"######  ",
		"        ",
		"        ",
	],
	"E": [
		"####### ",
		"##      ",
		"##      ",
		"##      ",
		"######  ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"####### ",
		"        ",
		"        ",
	],
	"F": [
		"########",
		"##      ",
		"##      ",
		"##      ",
		"######  ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"        ",
		"        ",
	],
	"G": [
		"  ##### ",
		" ##   ##",
		"##      ",
		"##      ",
		"##      ",
		"##   ###",
		"##    ##",
		"##    ##",
		" ##   ##",
		"  ##### ",
		"        ",
		"        ",
	],
	"H": [
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"########",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"I": [
		" ###### ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		" ###### ",
		"        ",
		"        ",
	],
	"J": [
		"   #### ",
		"     ## ",
		"     ## ",
		"     ## ",
		"     ## ",
		"     ## ",
		"     ## ",
		" #   ## ",
		" ## ##  ",
		"  ###   ",
		"        ",
		"        ",
	],
	"K": [
		"##    ##",
		"##   ## ",
		"##  ##  ",
		"## ##   ",
		"####    ",
		"####    ",
		"## ##   ",
		"##  ##  ",
		"##   ## ",
		"##    ##",
		"        ",
		"        ",
	],
	"L": [
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"####### ",
		"        ",
		"        ",
	],
	"M": [
		"##    ##",
		"###  ###",
		"########",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"N": [
		"##    ##",
		"###   ##",
		"####  ##",
		"####  ##",
		"## ## ##",
		"## ## ##",
		"##  ####",
		"##   ###",
		"##   ###",
		"##    ##",
		"        ",
		"        ",
	],
	"O": [
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"P": [
		"####### ",
		"##    ##",
		"##    ##",
		"##    ##",
		"####### ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"##      ",
		"        ",
		"        ",
	],
	"Q": [
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"## ## ##",
		"##  ####",
		" ##  ## ",
		"  #### #",
		"        ",
		"        ",
	],
	"R": [
		"####### ",
		"##    ##",
		"##    ##",
		"##    ##",
		"####### ",
		"#####   ",
		"##  ##  ",
		"##   ## ",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"S": [
		" ###### ",
		"##    ##",
		"##      ",
		"##      ",
		" ###### ",
		"      ##",
		"      ##",
		"      ##",
		"##    ##",
		" ###### ",
		"        ",
		"        ",
	],
	"T": [
		"########",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"        ",
		"        ",
	],
	"U": [
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"        ",
		"        ",
	],
	"V": [
		"##    ##",
		"##    ##",
		"##    ##",
		" ##  ## ",
		" ##  ## ",
		" ##  ## ",
		"  ####  ",
		"  ####  ",
		"   ##   ",
		"   ##   ",
		"        ",
		"        ",
	],
	"W": [
		"##    ##",
		"##    ##",
		"##    ##",
		"##    ##",
		"## ## ##",
		"## ## ##",
		"## ## ##",
		"########",
		"###  ###",
		"##    ##",
		"        ",
		"        ",
	],
	"X": [
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"   ##   ",
		"   ##   ",
		"  ####  ",
		" ##  ## ",
		"##    ##",
		"##    ##",
		"        ",
		"        ",
	],
	"Y": [
		"##    ##",
		"##    ##",
		" ##  ## ",
		"  ####  ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"   ##   ",
		"        ",
		"        ",
	],
	"Z": [
		"####### ",
		"     ## ",
		"     ## ",
		"    ##  ",
		"   ##   ",
		"  ##    ",
		" ##     ",
		"##      ",
		"##      ",
		"####### ",
		"        ",
		"        ",
	],
};

// reverse charMap so its charStr to char
let tempCharMap = {};
Object.keys(charMap).forEach(char=>{
	tempCharMap[charMap[char].join("")] = char;
})
charMap = tempCharMap;

(async ()=>{
	const url = "https://ringzer0ctf.com/challenges/17";

	let html = await request({
		url: url,
		headers: {
			Cookie: config.cookies
		}
	});
	html = html.replace(/<br\/>/gi, "");
	html = html.replace(/<br \/>/gi, "");

	let imageData = (/<img src="data:image\/png;base64,([\s\S]*?)"/).exec(html);
	imageData = imageData[1].trim();
	imageData = Buffer.from(imageData, "base64");
	//fs.writeFileSync("./test-original.png", imageData);

	Jimp.read(imageData, async (err,image)=>{
		if (err) return console.log(err);

		// 8 chars*6 + 5 spaces = 53 pixels
		image.crop(
			70, 23,
			53, 12
		);

		let out = "";

		for (let c=0; c<6; c++) {
			let charImg = image.clone();
			charImg.crop(c*8+c, 0, 8, 12);

			let charStr = "";
			for (let i=0; i<charImg.bitmap.data.length; i+=4) {
				if (
					charImg.bitmap.data[i+0] > 220 &&
					charImg.bitmap.data[i+1] > 220 &&
					charImg.bitmap.data[i+2] > 220
				) {
					charStr += "#";
				} else {
					charStr += " ";
				}
			}
			//console.log(charStr)

			let char = charMap[charStr];
			if (char!=undefined) {
				out += char;
			} else {
				out += "?";
			}
		}

		console.log(out)
		//image.write("./test.png");

		html = await request({
			url: url+"/"+out,
			headers: {
				Cookie: config.cookies
			}
		});
		html = html.replace(/<br\/>/gi, "");
		html = html.replace(/<br \/>/gi, "");
		
		let flag = (/<div class=['"]alert(?:[\s\S]*?)>([\s\S]*?)<\/div>/).exec(html);
		flag = flag[1].trim();
		console.log(flag);
	});
})();